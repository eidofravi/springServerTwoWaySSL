Its two way ssl, we will create following:
On Server side:
    1. create server key store
    2. Export certificate from key store for client
    3. create server trust store
    4. import client certificate to server's key store
    5. server configuration set up for certificates

On Client side:
    1. create client key store
    2. Export certificate from key store for server
    3. create client trust store
    4. import server certificate to client's key store
    5. client configuration set up for certificates

Details:
cd C:\Users\ravi123\IdeaProjects\springServerTwoWaySSL\certificates

On server side:
    1. create server key store
       keytool -genkey -keyalg RSA -alias raviServerPrivateKey -keystore raviServerkeystore.jks
       enter keystore password - raviServerKeyStorePwd
       enter private key password - raviServerPrivateKeyPwd

    2. Export certificate from key store for client
       keytool -export -alias raviServerPrivateKey -file exportedServerCertForClient.cer -keystore raviServerkeystore.jks

    Follow step 3 onwards, after client's step 2 is done
    3. create server trust store and import client certificate to server's key store
       keytool -import -alias raviServerPublicKey -file exportedClientCertForServer.cer -storetype JKS -keystore server.truststore
       enter keystore password - raviServerTrustStorePwd

    5. server configuration set up for certificates


On client side:
    1. create client key store
       keytool -genkey -keyalg RSA -alias raviClientPrivateKey -keystore raviClientkeystore.jks
       enter keystore password - raviClientKeyStorePwd
       enter private key password - raviClientPrivateKeyPwd

    2. Export certificate from key store for server
    keytool -export -alias raviClientPrivateKey -file exportedClientCertForServer.cer -keystore raviClientkeystore.jks

    Follow step 3 onwards, after server's step 2 is done
    3. create client trust store and import server certificate to client's key store
    keytool -import -alias raviClientPublicKey -file exportedServerCertForClient.cer -storetype JKS -keystore client.truststore
    enter keystore password - raviClientTrustStorePwd

    5. client configuration set up for certificates


One way ssl:
===============
Client(browser) validates the authenticity of server by the certificate provided by the server that contains the information of the company which has server(website)
 belongs to and about the signed authority CA(certification authority) which has validated the company information and signed the certificate.

Browser client usually contains the information about all available signed authority CA(certification authority) in their truststore.
for chrome - chrome://settings/?search=certificates
Whenever we try to access few websites for example "www.onlinesbi.com", we make a request to website for their logon page. Website before serving the logon page, it sends the
certificate of the server where website is hosted. Browser validates that server certificates by checking certificate authority details and matches this against its own
truststore. If it finds Certification is signed by valid signing authority and not expired, it starts interacting with website server.

Apart from browser client, JAVA has bundled a truststore called "cacerts" and it resides in the $JAVA_HOME/jre/lib/security directory.
Run below command :
$ keytool -list -keystore cacerts
password - changeit
Certificate fingerprint (SHA1): E6:21:F3:35:43:79:05:9A:4B:68:30:9D:8A:2F:74:22:15:87:EC:79
digicertglobalrootg3 [jdk], Aug 25, 2016, trustedCertEntry,
Certificate fingerprint (SHA1): 7E:04:DE:89:6A:3E:66:6D:00:E6:87:D3:3F:FA:D9:3B:E8:3D:34:9E
deutschetelekomrootca2 [jdk], Aug 25, 2016, trustedCertEntry,
Certificate fingerprint (SHA1): 85:A4:08:C0:9C:19:3E:5D:51:58:7D:CD:D6:13:30:FD:8C:DE:37:BF
entrustrootcaec1 [jdk], Aug 25, 2016, trustedCertEntry,
Certificate fingerprint (SHA1): 20:D8:06:40:DF:9B:25:F5:12:25:3A:11:EA:F7:59:8A:EB:14:B5:47
secomscrootca1 [jdk], Aug 25, 2016, trustedCertEntry,

If we write a custom java client (rest client), we can import server certificate to this "cacerts" truststore. But this is not ideal, as we don't have privilege to "cacerts" most of time.
So, what we do is we create a new trust store for that application and import the server certificate to that truststore as we have done in this demo project.


Two way ssl:
=============
client and server both authenticates each other by exchanging their certificate. Server will authenticate
client as well,
Server will not respond to every client which is requesting for the data.
Here client also send the certificate to server, that server validates against it server truststore.

Demo project I have created, client access the server by passing it's own certificate to server to get authenticated.
Samething we can do from the browser. But we have to add client keystore first to chrome browser, so browser sends
the certificate to server to get authenticated.
Chrome browser can not import .jks entension of keystore. We need to convert keystore to pkcs format .p12 that is industry standard.

C:\Users\ravi123\IdeaProjects\springClientTwoWaySSL>keytool -importkeystore -srckeystore raviClientkeystore.jks -destkeystore clientkeystoreForBrowser.p12 -deststoretype pkcs12 -destkeyp
ass privateKeyPwdForBrowser
Importing keystore raviClientkeystore.jks to clientkeystoreForBrowser.p12...
Enter destination keystore password: keystorePwdForBrowser
Re-enter new password: keystorePwdForBrowser
Warning:  Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified -destkeypass value.
Enter source keystore password: raviClientKeyStorePwd
Enter key password for <raviclientprivatekey> : raviClientPrivateKeyPwd
Entry for alias raviclientprivatekey successfully imported.
Import command completed:  1 entries successfully imported, 0 entries failed or cancelled

clientkeystoreForBrowser.p12 is created under C:\Users\ravi123\IdeaProjects\springClientTwoWaySSL.
Now we need to import this in chrome. I have created a word doc to show screenshots.











